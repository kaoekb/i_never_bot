import telebot
import random
from telebot import types
from pymongo import MongoClient, errors
from datetime import datetime
import os
from dotenv import load_dotenv, find_dotenv
import logging
from question import question
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(find_dotenv())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)
log_file_path = os.path.join(log_dir, "bot.log")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file_path),
        logging.StreamHandler()
    ]
)

def connect_to_mongo():
    while True:
        try:
            mongo_uri = os.getenv('Token_MDB')
            cluster = MongoClient(mongo_uri, serverSelectionTimeoutMS=5000)
            cluster.server_info()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ!")
            return cluster
        except errors.ServerSelectionTimeoutError:
            logging.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
cluster = connect_to_mongo()
db = cluster["i_never"]
users_collection = db["Users"]
projects_collection = db["Projects"]
ads_collection = db["Ads"]
stats_collection = db["Stats"]

admin_user_id = int(os.getenv('Your_user_ID'))

bot = telebot.TeleBot(os.getenv('Token_tg'))

def update_last_interaction(user_id):
    users_collection.update_one({"_id": user_id}, {"$set": {"last_interaction": datetime.now()}}, upsert=True)

def get_user_count():
    return users_collection.count_documents({})

def increment_question_access():
    stats_collection.update_one({}, {"$inc": {"questions_accessed": 1}}, upsert=True)

def get_question_access_count():
    stat = stats_collection.find_one()
    return stat.get("questions_accessed", 0) if stat else 0

def get_projects():
    return list(projects_collection.find())

def get_ads():
    return list(ads_collection.find())

def send_logs(message):
    if os.path.exists(log_file_path):
        with open(log_file_path, 'rb') as log_file:
            bot.send_document(message.chat.id, log_file)
    else:
        bot.send_message(message.chat.id, "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def notify_admin(text):
    bot.send_message(admin_user_id, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text}")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    users_collection.update_one({"_id": message.from_user.id}, {"$set": {"username": message.from_user.username, "last_interaction": datetime.now()}}, upsert=True)
    notify_admin(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} ({message.from_user.id})")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–í–æ–ø—Ä–æ—Å'))
    markup.add(types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞'), types.KeyboardButton('–ü—Ä–æ–µ–∫—Ç—ã'))
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=markup)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id == admin_user_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="status"))
        markup.add(types.InlineKeyboardButton("–õ–æ–≥–∏", callback_data="logs"))
        markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="remove_project"))
        markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="remove_ad"))
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.data == "status":
            bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {get_user_count()}\n–ó–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤: {get_question_access_count()}")
        elif call.data == "logs":
            send_logs(call.message)
        elif call.data == "remove_project":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(call.message, remove_project)
        elif call.data == "remove_ad":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ä–µ–∫–ª–∞–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(call.message, remove_ad)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_inline: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

def remove_project(message):
    projects_collection.delete_one({"link": message.text})
    bot.send_message(message.chat.id, "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω.")
    notify_admin(f"–£–¥–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç: {message.text}")

def remove_ad(message):
    ads_collection.delete_one({"link": message.text})
    bot.send_message(message.chat.id, "–†–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞.")
    notify_admin(f"–£–¥–∞–ª–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞: {message.text}")

bot.polling(none_stop=True)
