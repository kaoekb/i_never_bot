from telebot import types
from bot.database import users_collection, ads_collection
from config import ADMIN_ID
import logging
from bot.utils import notify_admin
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

def register_admin_handlers(bot):
    @bot.message_handler(commands=['admin'])
    def admin_panel(message):
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {message.from_user.id}")
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if message.from_user.id != ADMIN_ID:
                logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {message.from_user.id}")
                bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
                return
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="status"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="remove_ad"))
            markup.add(types.InlineKeyboardButton("–õ–æ–≥–∏", callback_data="logs"))
            markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="add_ad"))
            bot.send_message(message.chat.id, "üîπ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: True)
    def callback_inline(call):
        try:
            logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {call.from_user.id}")

            if call.data == "status":
                user_count = users_collection.count_documents({})
                bot.send_message(call.message.chat.id, f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
            
            elif call.data == "remove_ad":
                bot.send_message(call.message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ä–µ–∫–ª–∞–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
                bot.register_next_step_handler(call.message, remove_ad)
            
            elif call.data == "logs":
                send_logs(call.message)
            
            elif call.data == "add_ad":
                bot.send_message(call.message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã (—á–µ—Ä–µ–∑ |):")
                bot.register_next_step_handler(call.message, add_ad)
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def remove_ad(message):
    try:
        logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã —Å —Å—Å—ã–ª–∫–æ–π: {message.text}")
        result = ads_collection.delete_one({"link": message.text})
        if result.deleted_count > 0:
            message.bot.send_message(message.chat.id, "‚úÖ –†–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            message.bot.send_message(message.chat.id, "‚ùå –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã: {e}")
        message.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.")

def add_ad(message):
    try:
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
        parts = message.text.split("|")
        if len(parts) != 2:
            message.bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—Å—ã–ª–∫–∞ | –æ–ø–∏—Å–∞–Ω–∏–µ")
            return
        ads_collection.insert_one({"link": parts[0].strip(), "description": parts[1].strip()})
        message.bot.send_message(message.chat.id, "‚úÖ –†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã: {e}")
        message.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.")

def send_logs(message):
    try:
        log_file_path = "logs/bot.log"
        
        if not os.path.exists(log_file_path):
            message.bot.send_message(message.chat.id, "‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if not os.access(log_file_path, os.R_OK):
            message.bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞.")
            return
        
        with open(log_file_path, "rb") as log_file:
            try:
                message.bot.send_document(message.chat.id, log_file)
                logging.info("–õ–æ–≥-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            except Exception as send_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–∞: {send_error}")
                message.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤.")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ª–æ–≥–æ–≤: {e}")
        message.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤.")