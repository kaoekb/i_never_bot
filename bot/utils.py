import logging
from config import ADMIN_ID
from datetime import datetime, timedelta
import re
import random
import string

def notify_admin(bot, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –≤–∞–∂–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–µ."""
    try:
        bot.send_message(ADMIN_ID, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

def format_date(timestamp):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    if isinstance(timestamp, (int, float)):
        return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
    else:
        raise ValueError("Timestamp must be an integer or float.")

def truncate_text(text, length=100):
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç '...' –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π."""
    return text[:length] + "..." if len(text) > length else text

def is_valid_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL."""
    regex = re.compile(r'^(https?://)?(www\.)?[\w-]+(\.[a-z]{2,})+(/[\w-]*)*$')
    return bool(re.match(regex, url))

def handle_error(error):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö."""
    logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")
    # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    # notify_admin(bot, f"–û—à–∏–±–∫–∞: {error}")

def generate_random_string(length=10, chars=string.ascii_letters + string.digits):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä."""
    return ''.join(random.choice(chars) for _ in range(length))

def calculate_time_difference(date1, date2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏."""
    if not isinstance(date1, datetime) or not isinstance(date2, datetime):
        raise ValueError("Both date1 and date2 must be datetime objects.")
    
    delta = date2 - date1
    return str(delta)

def add_days_to_date(date, days):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∫ –¥–∞—Ç–µ."""
    if not isinstance(date, datetime):
        raise ValueError("date must be a datetime object.")
    
    return date + timedelta(days=days)

def remove_whitespace(text):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
    return "".join(text.split())

def sanitize_input(text):
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
    # –ü—Ä–∏–º–µ—Ä: –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    return re.sub(r'[^a-zA-Z0-9 ]', '', text)

def get_day_of_week(date):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã."""
    if not isinstance(date, datetime):
        raise ValueError("date must be a datetime object.")
    
    return date.strftime('%A')

def convert_seconds_to_hms(seconds):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã'."""
    if not isinstance(seconds, (int, float)):
        raise ValueError("Input must be an integer or float.")
    
    return str(timedelta(seconds=seconds))

def is_email_valid(email):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º email."""
    regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return bool(re.match(regex, email))

def is_phone_number_valid(phone_number):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –†–æ—Å—Å–∏–∏)."""
    regex = r'^\+7\d{10}$'
    return bool(re.match(regex, phone_number))

def format_price(price):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç—ã—Å—è—á –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã."""
    if not isinstance(price, (int, float)):
        raise ValueError("Price must be an integer or float.")
    
    return f"{price:,.2f} ‚ÇΩ"

